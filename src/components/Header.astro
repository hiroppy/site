---
import { Image } from "astro:assets";
import Avatar from "./Avatar.astro";
import Button from "./Button.astro";
import NavButton from "./NavButton.astro";
import ThemeToggle from "./ThemeToggle.astro";
import Icon from "./Icon.astro";
import meImage from "../assets/images/meta/me.png";
import meta from "../../node_modules/hiroppy/generated/meta.json";

const currentPath = Astro.url.pathname;
---

<header
  class="sticky top-0 z-50 w-full border-b border-gray-200 bg-white/80 backdrop-blur-md dark:border-slate-700 dark:bg-slate-900/80"
>
  <div class="container mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <a
        href="/"
        class="flex items-center space-x-3"
        aria-label="Hiroppy ホームページに戻る"
      >
        <div
          id="header-avatar"
          class="opacity-0 transition-opacity duration-300"
        >
          <Avatar class="ring-2 ring-blue-500">
            <Image
              src={meImage}
              alt="Hiroppy"
              class="h-full w-full object-cover"
              width={40}
              height={40}
              format="webp"
              quality={80}
            />
          </Avatar>
        </div>
        <div id="header-text" class="opacity-0 transition-opacity duration-300">
          <h1 class="text-xl font-bold text-gray-900 dark:text-white">
            Hiroppy
          </h1>
          <p class="text-sm text-gray-600 dark:text-gray-300">
            JavaScript Engineer
          </p>
        </div>
      </a>
      <nav
        class="hidden items-center space-x-2 md:flex"
        aria-label="メインナビゲーション"
      >
        <NavButton
          variant={currentPath === "/" ? "active" : "default"}
          href="/"
        >
          About
        </NavButton>
        <NavButton
          variant={currentPath.startsWith("/blog") ? "active" : "default"}
          href="/blog"
        >
          Blog
        </NavButton>
        <NavButton
          variant={currentPath.startsWith("/media") ? "active" : "default"}
          href="/media"
        >
          Media
        </NavButton>
        <NavButton
          variant={currentPath.startsWith("/jobs") ? "active" : "default"}
          href="/jobs"
        >
          Jobs
        </NavButton>
        <NavButton
          variant={currentPath.startsWith("/projects") ? "active" : "default"}
          href="/projects"
        >
          Projects
        </NavButton>
      </nav>
      <div class="flex items-center space-x-2">
        <button
          id="mobile-menu-button"
          type="button"
          class="inline-flex items-center justify-center rounded-md p-2 text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 dark:text-gray-300 dark:hover:bg-gray-800 md:hidden"
          aria-expanded="false"
        >
          <span class="sr-only">メニューを開く</span>
          <Icon icon="mdi:menu" width="24" height="24" />
        </button>
        <ThemeToggle />
        <Button
          variant="default"
          size="sm"
          href={meta.form.request}
          class="hidden md:flex"
        >
          <Icon icon="mdi:email-outline" class="mr-2" width="16" height="16" />
          お問い合わせ
        </Button>
      </div>
    </div>
    <!-- Mobile menu -->
    <nav
      id="mobile-menu"
      class="hidden md:hidden"
      aria-label="モバイルナビゲーション"
    >
      <div class="px-2 pb-3 pt-6">
        <!-- Horizontal Scrollable Navigation -->
        <div class="scrollbar-hide mb-4 overflow-x-auto">
          <div class="flex space-x-2 pb-2">
            <NavButton
              variant={currentPath === "/" ? "mobile-active" : "mobile"}
              href="/"
              class="flex-shrink-0"
            >
              About
            </NavButton>
            <NavButton
              variant={currentPath.startsWith("/blog")
                ? "mobile-active"
                : "mobile"}
              href="/blog"
              class="flex-shrink-0"
            >
              Blog
            </NavButton>
            <NavButton
              variant={currentPath.startsWith("/media")
                ? "mobile-active"
                : "mobile"}
              href="/media"
              class="flex-shrink-0"
            >
              Media
            </NavButton>
            <NavButton
              variant={currentPath.startsWith("/jobs")
                ? "mobile-active"
                : "mobile"}
              href="/jobs"
              class="flex-shrink-0"
            >
              Jobs
            </NavButton>
            <NavButton
              variant={currentPath.startsWith("/projects")
                ? "mobile-active"
                : "mobile"}
              href="/projects"
              class="flex-shrink-0"
            >
              Projects
            </NavButton>
          </div>
        </div>
        <!-- Contact Button -->
        <div class="border-t border-gray-200 pt-4 dark:border-gray-700">
          <Button
            variant="default"
            href={meta.form.request}
            class="w-full justify-center"
          >
            <Icon
              icon="mdi:email-outline"
              class="mr-2"
              width="16"
              height="16"
            />
            お問い合わせ
          </Button>
        </div>
      </div>
    </nav>
  </div>
</header>

<script>
  function initializeMobileMenu() {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");

    if (!mobileMenuButton || !mobileMenu) {
      return;
    }

    // Remove existing event listeners to prevent duplicates
    const newButton = mobileMenuButton.cloneNode(true) as HTMLButtonElement;
    mobileMenuButton.parentNode?.replaceChild(newButton, mobileMenuButton);

    // Add click event listener
    newButton.addEventListener("click", () => {
      const isExpanded = newButton.getAttribute("aria-expanded") === "true";
      newButton.setAttribute("aria-expanded", (!isExpanded).toString());
      mobileMenu?.classList.toggle("hidden");
    });

    // Close menu when clicking nav links
    const navLinks = mobileMenu.querySelectorAll("a");
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
        newButton.setAttribute("aria-expanded", "false");
      });
    });
  }

  // Initialize on DOM ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeMobileMenu);
  } else {
    initializeMobileMenu();
  }

  // Re-initialize on page transitions (ViewTransitions)
  document.addEventListener("astro:page-load", initializeMobileMenu);

  // Handle header avatar visibility
  function initializeAvatarVisibility() {
    const headerAvatar = document.getElementById("header-avatar");
    const headerText = document.getElementById("header-text");

    if (!headerAvatar || !headerText) return;

    // Check if we're on the index page
    if (window.location.pathname !== "/") {
      // On other pages, always show header avatar and text
      headerAvatar.classList.remove("opacity-0");
      headerAvatar.classList.add("opacity-100");
      headerText.classList.remove("opacity-0");
      headerText.classList.add("opacity-100");
      return;
    }

    // Only on index page, check for hero avatar and use intersection observer
    const heroAvatar = document.querySelector("section.py-12 .mx-auto.ring-4");
    if (!heroAvatar) {
      // If no hero avatar found, show header avatar
      headerAvatar.classList.remove("opacity-0");
      headerAvatar.classList.add("opacity-100");
      headerText.classList.remove("opacity-0");
      headerText.classList.add("opacity-100");
      return;
    }

    // Create intersection observer for hero avatar
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Hero is visible, hide header avatar
          headerAvatar.classList.remove("opacity-100");
          headerAvatar.classList.add("opacity-0");
          headerText.classList.remove("opacity-100");
          headerText.classList.add("opacity-0");
        } else {
          // Hero is not visible, show header avatar
          headerAvatar.classList.remove("opacity-0");
          headerAvatar.classList.add("opacity-100");
          headerText.classList.remove("opacity-0");
          headerText.classList.add("opacity-100");
        }
      });
    });

    observer.observe(heroAvatar);
  }

  // Initialize avatar visibility
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeAvatarVisibility);
  } else {
    initializeAvatarVisibility();
  }

  // Re-initialize on page transitions
  document.addEventListener("astro:page-load", initializeAvatarVisibility);
</script>
