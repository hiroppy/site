---
import { load } from "cheerio";
import Image from "./Image.astro";
import { writeFileSync, readFileSync } from "node:fs";
import Link from "../components/Link.astro";

type Props = {
  url: string;
};

const { url } = Astro.props;
const generatedFilePath = new URL(
  "../../generated/ogp.json",
  // astroはbuild時に自身ではなくdist/entry.mjsに向けてしまう
  import.meta.url,
);
const ogp = JSON.parse(readFileSync(generatedFilePath, "utf8"));
let title = "";
let description = "";
let image = "";

if (ogp[url]) {
  title = ogp[url].title;
  description = ogp[url].description;
  image = ogp[url].image;
} else {
  try {
    const html = await fetch(url).then((res) => res.text());
    const $ = load(html);

    title = $("meta[property='og:title']").attr("content") ?? $("title").text();
    description =
      $("meta[property='og:description']").attr("content") ??
      $("meta[name='description']").attr("content") ??
      "";
    image = $("meta[property='og:image']").attr("content") ?? "";

    if (image && !image.startsWith("http")) {
      image = `${new URL(url).origin}/${image}`;
    }
  } catch (error) {
    if (error instanceof Error) {
      console.warn(`Failed to fetch OG data for ${url}:`, error.message);
    }

    title = url;
    description = "";
    image = "";
  }

  if (import.meta.env.PROD) {
    const ogp = JSON.parse(readFileSync(generatedFilePath, "utf8"));

    writeFileSync(
      generatedFilePath,
      JSON.stringify(
        {
          ...ogp,
          [url]: {
            title,
            description,
            image,
          },
        },
        null,
        2,
      ),
    );
  }
}
---

<div
  class="flex justify-between gap-4 rounded-sm border border-gray-300 bg-gray-100 p-4 dark:border-gray-600 dark:bg-gray-700"
>
  <div class="flex flex-1 flex-col gap-2">
    <Link
      href={url}
      class="font-semibold text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
      >{title}</Link
    >
    <span class="text-sm text-gray-600 dark:text-gray-400"
      >{
        description && description.length > 100
          ? `${description?.slice(0, 100)}...`
          : description
      }</span
    >
  </div>
  {
    image && (
      <div class="hidden h-32 max-h-40 max-w-52 sm:block">
        <Image
          src={image}
          alt="title"
          class="h-full w-full rounded-sm object-cover"
          width={60}
          height={40}
        />
      </div>
    )
  }
</div>
