---
import { load } from "cheerio";
import Image from "./Image.astro";
import { writeFileSync, readFileSync } from "node:fs";
import Card from "./Card.astro";
import CardContent from "./CardContent.astro";
import CardTitle from "./CardTitle.astro";
import Icon from "./Icon.astro";

type Props = {
  url: string;
};

const { url } = Astro.props;
const generatedFilePath = new URL(
  "../../generated/ogp.json",
  // astroはbuild時に自身ではなくdist/entry.mjsに向けてしまう
  import.meta.url,
);
const ogp = JSON.parse(readFileSync(generatedFilePath, "utf8"));
let title = "";
let description = "";
let image = "";

if (ogp[url]) {
  title = ogp[url].title;
  description = ogp[url].description;
  image = ogp[url].image;
} else {
  try {
    const html = await fetch(url).then((res) => res.text());
    const $ = load(html);

    title = $("meta[property='og:title']").attr("content") ?? $("title").text();
    description =
      $("meta[property='og:description']").attr("content") ??
      $("meta[name='description']").attr("content") ??
      "";
    image = $("meta[property='og:image']").attr("content") ?? "";

    if (image && !image.startsWith("http")) {
      image = `${new URL(url).origin}/${image}`;
    }
  } catch (error) {
    if (error instanceof Error) {
      console.warn(`Failed to fetch OG data for ${url}:`, error.message);
    }

    title = url;
    description = "";
    image = "";
  }

  if (import.meta.env.PROD) {
    const ogp = JSON.parse(readFileSync(generatedFilePath, "utf8"));

    writeFileSync(
      generatedFilePath,
      JSON.stringify(
        {
          ...ogp,
          [url]: {
            title,
            description,
            image,
          },
        },
        null,
        2,
      ),
    );
  }
}
---

<a
  href={url}
  target="_blank"
  rel="noopener noreferrer"
  class="group block overflow-hidden rounded-lg border border-gray-200 bg-white transition-all duration-200 hover:border-blue-300 hover:shadow-md dark:border-gray-700 dark:bg-gray-800 dark:hover:border-blue-600"
>
  <div class="flex h-32">
    <div class="flex min-w-0 flex-1 flex-col p-4">
      <h3
        class="mt-0 mb-2 line-clamp-2 text-base leading-tight font-medium text-gray-900 group-hover:text-blue-600 dark:text-gray-100 dark:group-hover:text-blue-400"
      >
        {title}
      </h3>
      {
        description && (
          <p class="mt-0 truncate text-sm text-gray-600 dark:text-gray-400">
            {description}
          </p>
        )
      }
      <div class="flex items-center gap-2">
        <Icon
          icon="mdi:open-in-new"
          width="12"
          height="12"
          class="text-gray-400 dark:text-gray-500"
        />
        <span class="truncate text-xs text-gray-500 dark:text-gray-400">
          {new URL(url).hostname}
        </span>
      </div>
    </div>
    {
      image && (
        <div class="w-24 flex-shrink-0 overflow-hidden md:w-[243px]">
          <Image
            src={image}
            alt={title}
            class="h-full w-full object-cover"
            width={243}
            height={128}
          />
        </div>
      )
    }
  </div>
</a>
