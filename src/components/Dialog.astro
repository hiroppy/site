---
import Icon from "./Icon.astro";

type Props = {
  id: string;
  title: string;
  maxWidth?: string;
  closeButtonId?: string;
  showHeader?: boolean;
  headerClass?: string;
  contentClass?: string;
  dialogClass?: string;
  titleId?: string;
  dynamicTitle?: boolean;
  backdrop?: "default" | "blur" | "dark";
  position?: "center" | "auto";
};

const {
  id,
  title,
  maxWidth = "max-w-2xl",
  closeButtonId = `${id}-close-btn`,
  showHeader = true,
  headerClass = "",
  contentClass = "",
  dialogClass = "",
  titleId = `${id}-title`,
  dynamicTitle = false,
  backdrop = "default",
  position = "center",
} = Astro.props;

// Backdrop variants
const backdropClasses = {
  default: "backdrop:bg-black/50",
  blur: "backdrop:bg-black/20 backdrop:backdrop-blur-sm",
  dark: "backdrop:bg-black/70",
};

// Position variants
const positionClasses = {
  center: "mx-auto my-auto max-sm:my-4",
  auto: "m-auto",
};

const defaultDialogClass = `${positionClasses[position]} w-[calc(100%-2rem)] ${maxWidth} rounded-lg border border-gray-200 bg-white p-0 shadow-xl ${backdropClasses[backdrop]} dark:border-gray-700 dark:bg-gray-800 sm:w-full`;
const finalDialogClass = dialogClass || defaultDialogClass;
---

<dialog id={id} class={finalDialogClass}>
  {
    showHeader && (
      <div
        class={`flex items-center justify-between border-b border-gray-200 p-4 dark:border-gray-700 ${headerClass}`}
      >
        <h2
          class="text-lg font-semibold text-gray-900 dark:text-gray-100"
          id={titleId}
        >
          {dynamicTitle ? "" : title}
        </h2>
        <button
          id={closeButtonId}
          type="button"
          class="rounded-md p-1 text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700 dark:hover:text-gray-300"
          title="Close dialog"
        >
          <Icon icon="mdi:close" class="h-5 w-5" />
        </button>
      </div>
    )
  }

  <div class={contentClass}>
    <slot />
  </div>
</dialog>

<script is:inline define:vars={{ id, closeButtonId }}>
  // ダイアログの共通初期化ロジック
  function initializeDialog() {
    const dialog = document.getElementById(id);
    const closeBtn = document.getElementById(closeButtonId);

    if (!dialog || !closeBtn) return;

    // 閉じるボタンのイベント
    closeBtn.addEventListener("click", () => {
      dialog.close();
    });

    // 背景クリックで閉じる
    dialog.addEventListener("click", (e) => {
      if (e.target === dialog) {
        dialog.close();
      }
    });

    // グローバル関数として公開（必要に応じて）
    const openFunctionName = `open${id.charAt(0).toUpperCase() + id.slice(1).replace(/-([a-z])/g, (g) => g[1].toUpperCase())}`;
    window[openFunctionName] = () => {
      dialog.showModal();
    };
  }

  // 初期化
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeDialog);
  } else {
    initializeDialog();
  }

  document.addEventListener("astro:page-load", initializeDialog);
</script>
