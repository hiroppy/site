---
import { Icon } from "astro-icon/components";

export type Props = {
  defaultTab?: string;
};

const { defaultTab } = Astro.props;

// Generate a unique ID for this code group
const groupId = `code-group-${Math.random().toString(36).substring(2, 11)}`;

// Extract panel data from slot content using regex
const slotContent = await Astro.slots.render("default");
const panelData = [];

// Extract all code-group-panel data attributes
const panelRegex =
  /<div[^>]*class="code-group-panel"[^>]*data-label="([^"]*)"[^>]*data-icon="([^"]*)"[^>]*data-language="([^"]*)"[^>]*>/g;
let match;
let index = 0;

while ((match = panelRegex.exec(slotContent)) !== null) {
  const label = match[1];
  const icon = match[2] || "mdi:code-braces";
  const language = match[3] || "default";

  panelData.push({
    label,
    icon,
    language,
    index,
    isDefault: defaultTab ? label === defaultTab : index === 0,
  });
  index++;
}
---

<div class="code-group" data-group-id={groupId}>
  <div class="code-group-tabs" role="tablist">
    {
      panelData.map((panel) => (
        <button
          class="code-group-tab"
          role="tab"
          aria-selected={panel.isDefault ? "true" : "false"}
          data-index={panel.index}
          tabindex={panel.isDefault ? "0" : "-1"}
          id={`tab-${groupId}-${panel.index}`}
          aria-controls={`panel-${groupId}-${panel.index}`}
        >
          <span class="code-group-tab-icon">
            <Icon name={panel.icon} size={16} />
          </span>
          <span class="code-group-tab-text">{panel.label}</span>
        </button>
      ))
    }
  </div>
  <div class="code-group-panels">
    <slot />
  </div>
</div>

<script define:vars={{ groupId, defaultTab }} is:inline>
  function initializeCodeGroup() {
    const codeGroup = document.querySelector(`[data-group-id="${groupId}"]`);
    if (!codeGroup) return;

    const tabsContainer = codeGroup.querySelector(".code-group-tabs");
    const panelsContainer = codeGroup.querySelector(".code-group-panels");
    const allTabs = tabsContainer.querySelectorAll(".code-group-tab");
    const allPanels = panelsContainer.querySelectorAll(".code-group-panel");

    // Set initial panel visibility and ARIA attributes
    allPanels.forEach((panel, index) => {
      const isDefault = defaultTab
        ? panel.dataset.label === defaultTab
        : index === 0;
      panel.style.display = isDefault ? "block" : "none";
      panel.setAttribute("role", "tabpanel");
      panel.setAttribute("aria-labelledby", `tab-${groupId}-${index}`);
      panel.setAttribute("id", `panel-${groupId}-${index}`);
    });

    // Add event listeners to existing server-rendered tabs
    allTabs.forEach((tab, index) => {
      // Enhanced click handler with smooth animations
      tab.addEventListener("click", (e) => {
        e.preventDefault();
        switchToTab(index);
      });

      // Keyboard navigation
      tab.addEventListener("keydown", (e) => {
        const currentIndex = Array.from(allTabs).indexOf(tab);
        let targetIndex = currentIndex;

        switch (e.key) {
          case "ArrowLeft":
            e.preventDefault();
            targetIndex =
              currentIndex > 0 ? currentIndex - 1 : allTabs.length - 1;
            break;
          case "ArrowRight":
            e.preventDefault();
            targetIndex =
              currentIndex < allTabs.length - 1 ? currentIndex + 1 : 0;
            break;
          case "Home":
            e.preventDefault();
            targetIndex = 0;
            break;
          case "End":
            e.preventDefault();
            targetIndex = allTabs.length - 1;
            break;
          case "Enter":
          case " ":
            e.preventDefault();
            switchToTab(currentIndex);
            return;
        }

        if (targetIndex !== currentIndex) {
          allTabs[targetIndex].focus();
          switchToTab(targetIndex);
        }
      });
    });

    // Tab switching function
    function switchToTab(targetIndex) {
      const targetTab = allTabs[targetIndex];

      // Update tab states
      allTabs.forEach((t, i) => {
        const isSelected = i === targetIndex;
        t.setAttribute("aria-selected", isSelected ? "true" : "false");
        t.setAttribute("tabindex", isSelected ? "0" : "-1");
      });

      // Switch panels
      allPanels.forEach((p, i) => {
        p.style.display = i === targetIndex ? "block" : "none";
      });

      // Announce to screen readers
      const announcement = document.createElement("div");
      announcement.setAttribute("aria-live", "polite");
      announcement.setAttribute("aria-atomic", "true");
      announcement.className = "sr-only";
      announcement.textContent = `Switched to ${targetTab.textContent} tab`;
      document.body.appendChild(announcement);
      setTimeout(() => document.body.removeChild(announcement), 1000);
    }

    // Add smooth scrolling for tab overflow
    tabsContainer.addEventListener(
      "wheel",
      (e) => {
        // Only handle horizontal scrolling when the tabs container can scroll horizontally
        const canScrollHorizontally =
          tabsContainer.scrollWidth > tabsContainer.clientWidth;

        if (e.deltaY !== 0 && canScrollHorizontally) {
          // Only prevent default if we're actually handling the scroll
          if (e.shiftKey || Math.abs(e.deltaX) > Math.abs(e.deltaY)) {
            e.preventDefault();
            tabsContainer.scrollLeft += e.deltaY;
          }
        }
      },
      { passive: false },
    );

    // Touch/swipe support for mobile
    let startX = null;
    let startY = null;

    panelsContainer.addEventListener(
      "touchstart",
      (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      },
      { passive: true },
    );

    panelsContainer.addEventListener(
      "touchend",
      (e) => {
        if (!startX || !startY) return;

        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const diffX = startX - endX;
        const diffY = startY - endY;

        // Only handle horizontal swipes
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          const currentTab = tabsContainer.querySelector(
            '[aria-selected="true"]',
          );
          const currentIndex = Array.from(allTabs).indexOf(currentTab);

          if (diffX > 0 && currentIndex < allTabs.length - 1) {
            // Swipe left - next tab
            switchToTab(currentIndex + 1);
          } else if (diffX < 0 && currentIndex > 0) {
            // Swipe right - previous tab
            switchToTab(currentIndex - 1);
          }
        }

        startX = null;
        startY = null;
      },
      { passive: true },
    );
  }

  // Initialize on both DOMContentLoaded and Astro page load
  document.addEventListener("DOMContentLoaded", initializeCodeGroup);
  document.addEventListener("astro:page-load", initializeCodeGroup);
</script>

<style>
  .code-group {
    margin: 1.75rem 0;
    border-radius: 0.5rem;
    overflow: hidden;
    background-color: var(--ec-frm-edBg);
    border: 1px solid var(--ec-brdCol);
  }
  .code-group-tabs {
    display: flex;
    background: var(--ec-frm-edTabBarBg);
    border-bottom: 1px solid var(--ec-brdCol);
    overflow-x: auto;
    scrollbar-width: none;
    padding: 0;
    gap: 0;
  }

  .code-group-tabs::-webkit-scrollbar {
    display: none;
  }

  .code-group-tab {
    padding: 0.75rem 1.25rem;
    border: none;
    background: transparent;
    color: #6b7280;
    font-size: 0.875rem;
    font-family: var(--ec-uiFontFml);
    font-weight: 500;
    cursor: pointer;
    white-space: nowrap;
    position: relative;
    border-radius: 0;
    min-height: auto;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    opacity: 1;
    border-bottom: 2px solid transparent;
  }

  .code-group-tab-icon {
    display: flex;
    align-items: center;
    opacity: 0.8;
  }

  .code-group-tab-icon svg {
    width: 16px;
    height: 16px;
    fill: currentColor;
  }

  .code-group-tab-text {
    font-size: 0.875rem;
    font-weight: 500;
  }

  .code-group-tab:hover .code-group-tab-icon {
    opacity: 1;
  }

  .code-group-tab[aria-selected="true"] .code-group-tab-icon {
    opacity: 1;
  }

  .code-group-tab:hover {
    background-color: rgba(0, 0, 0, 0.05);
    opacity: 0.9;
  }

  @media (prefers-color-scheme: dark) {
    .code-group-tab:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
  }

  .code-group-tab[aria-selected="true"] {
    background: transparent;
    color: #374151;
    opacity: 1;
    font-weight: 600;
    border-bottom: 2px solid #3b82f6;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .code-group-tab {
      color: #9ca3af;
    }

    .code-group-tab[aria-selected="true"] {
      color: #e5e7eb;
      border-bottom-color: #60a5fa;
    }
  }

  .code-group-panels {
    background-color: var(--ec-frm-edBg);
    position: relative;
  }
  .code-group-panels :global(.expressive-code) {
    margin: 0;
    border-radius: 0;
    border-top: none;
  }
  .code-group-panels :global(.frame) {
    border: none;
    border-radius: 0;
    background: var(--ec-frm-edBg);
    border-top: none;
  }
  .code-group-panels :global(.header) {
    display: none;
  }

  .code-group-panels :global(pre) {
    border-radius: 0;
    margin: 0;
    border-top: none;
  }

  /* Focus styles for accessibility */
  .code-group-tab:focus-visible {
    outline: 2px solid var(--ec-focusBrd, #3b82f6);
    outline-offset: 2px;
    background-color: rgba(59, 130, 246, 0.1);
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .code-group-tab {
      padding: 0.625rem 1rem;
      gap: 0.375rem;
    }

    .code-group-tab-text {
      font-size: 0.8rem;
    }

    .code-group-tab-icon svg {
      width: 14px;
      height: 14px;
    }
  }

  /* Screen reader only class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
