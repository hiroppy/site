---
import ServiceIcon from "./ServiceIcon.astro";
import Icon from "../Icon.astro";
import type { ServiceGroup } from "../../utils/articlesApi";

type Props = {
  serviceName: string;
  serviceData: ServiceGroup;
  href: string;
  isSelected?: boolean;
  showCount?: boolean;
  showVisibilityToggle?: boolean;
  showLastUpdated?: boolean;
  variant?: "sidebar" | "dialog";
};

const {
  serviceName,
  serviceData,
  href,
  isSelected = false,
  showCount = true,
  showVisibilityToggle = false,
  showLastUpdated = false,
  variant = "sidebar",
} = Astro.props;

const firstSource = serviceData.sources[0];

const variantClasses = {
  sidebar: isSelected
    ? "flex items-center gap-3 rounded-lg bg-blue-600 text-white shadow-sm px-3 py-2 text-sm font-medium transition-colors"
    : "flex items-center gap-3 rounded-lg text-gray-700 hover:bg-gray-200 dark:text-gray-300 dark:hover:bg-gray-800 px-3 py-2 text-sm font-medium transition-colors",
  dialog:
    "flex items-start gap-3 rounded-lg border border-gray-200 p-4 transition-colors hover:border-gray-300 hover:bg-gray-50 dark:border-gray-700 dark:hover:border-gray-600 dark:hover:bg-gray-800",
};
---

{
  variant === "dialog" && showVisibilityToggle ? (
    <div
      class={`source-card ${variantClasses[variant]}`}
      data-source-name={serviceName.toLowerCase()}
      data-source-kind={firstSource.kind.toLowerCase()}
      data-source-id={firstSource.id}
    >
      <a href={href} class="flex min-w-0 flex-1 items-start gap-3">
        <div class="mt-0.5 flex-shrink-0">
          <ServiceIcon source={firstSource} size="lg" />
        </div>
        <div class="min-w-0 flex-1">
          <h3 class="mb-1 truncate font-semibold text-gray-900 dark:text-gray-100">
            {serviceName}
          </h3>
          <div class="flex flex-col gap-1 text-xs text-gray-500 dark:text-gray-400">
            <div class="flex items-center gap-2">
              {showCount && (
                <>
                  <span class="font-medium">
                    {serviceData.articleCount} articles
                  </span>
                  <span>â€¢</span>
                </>
              )}
              <span class="capitalize">{firstSource.kind}</span>
            </div>
            {showLastUpdated && firstSource.latest && (
              <div class="text-gray-400 dark:text-gray-500">
                Last:{" "}
                {new Date(firstSource.latest).toLocaleString("ja-JP", {
                  timeZone: "Asia/Tokyo",
                  month: "short",
                  day: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </div>
            )}
          </div>
        </div>
      </a>
      <div class="flex-shrink-0">
        <button
          type="button"
          class="subscription-toggle cursor-pointer rounded-md p-1 text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700 dark:hover:text-gray-300"
          data-source-id={firstSource.id}
          title="Toggle subscription"
        >
          <Icon icon="mdi:heart" class="subscribed-icon h-4 w-4 text-red-400" />
          <Icon
            icon="mdi:heart-outline"
            class="unsubscribed-icon hidden h-4 w-4"
          />
        </button>
      </div>
    </div>
  ) : (
    <a
      href={href}
      class={variantClasses[variant]}
      data-source-id={firstSource.id}
    >
      <ServiceIcon source={firstSource} size="sm" />
      <span class="flex-1 truncate">{serviceName}</span>
      {showCount && (
        <span
          class={`ml-2 rounded-full px-2 py-0.5 text-xs ${
            isSelected
              ? "bg-blue-400 text-white"
              : "bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400"
          }`}
        >
          {serviceData.articleCount || 0}
        </span>
      )}
    </a>
  )
}
