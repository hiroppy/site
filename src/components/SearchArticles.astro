---
import Icon from "./Icon.astro";

const { ALGOLIA_APPLICATION_ID, ALGOLIA_SEARCH_ONLY_KEY } = import.meta.env;

if (!ALGOLIA_APPLICATION_ID || !ALGOLIA_SEARCH_ONLY_KEY) {
  throw new Error(
    "ALGOLIA_APPLICATION_ID and ALGOLIA_SEARCH_ONLY_KEY are required",
  );
}
---

<div class="relative">
  <Icon
    icon="mdi:magnify"
    class="absolute left-3 top-1/2 -translate-y-1/2 transform text-gray-400"
    width="16"
    height="16"
  />
  <input
    id="search-input"
    placeholder="記事を検索..."
    class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 pl-10 text-base text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 dark:placeholder-gray-400"
  />
  <!-- Search Results Dropdown -->
  <div
    id="search-results"
    class="absolute left-0 right-0 top-full z-50 mt-1 hidden max-h-96 overflow-y-auto rounded-md border border-gray-300 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800"
  >
    <ul id="search-result" class="py-2">
      <!-- Results will be inserted here -->
    </ul>
    <div
      id="no-results"
      class="hidden p-4 text-center text-gray-500 dark:text-gray-400"
    >
      該当する記事が見つかりませんでした
    </div>
  </div>
</div>

<script
  define:vars={{ ALGOLIA_APPLICATION_ID, ALGOLIA_SEARCH_ONLY_KEY }}
  is:inline
>
  window.algolia = {
    applicationId: ALGOLIA_APPLICATION_ID,
    searchOnlyKey: ALGOLIA_SEARCH_ONLY_KEY,
  };
</script>

<script>
  import { liteClient as algoliasearch } from "algoliasearch/lite";
  import instantsearch from "instantsearch.js/es";
  import { connectAutocomplete } from "instantsearch.js/es/connectors";
  import type { AutocompleteRenderState } from "instantsearch.js/es/connectors/autocomplete/connectAutocomplete";

  function initializeSearch() {
    // Check if already initialized
    if (window.searchInitialized) {
      return;
    }

    const input = document.querySelector<HTMLInputElement>("#search-input");
    const ul = document.querySelector<HTMLUListElement>("#search-result");
    const searchResults =
      document.querySelector<HTMLDivElement>("#search-results");
    const noResults = document.querySelector<HTMLDivElement>("#no-results");

    // Exit if elements not found
    if (!input || !ul || !searchResults || !noResults) {
      console.warn("Search elements not found");
      return;
    }

    // Exit if algolia config not available
    if (!window.algolia) {
      console.warn("Algolia config not available");
      return;
    }

    try {
      const searchClient = algoliasearch(
        window.algolia.applicationId,
        window.algolia.searchOnlyKey,
      );
      const search = instantsearch({
        indexName: "blog",
        searchClient,
        onStateChange({ uiState, setUiState }) {
          const query = uiState.blog?.query || "";
          if (query.length === 0) {
            hideResults();
          }
          setUiState(uiState);
        },
      });
      const customAutocomplete = connectAutocomplete(renderAutocomplete);

      search.addWidgets([
        customAutocomplete({
          // @ts-expect-error type mismatch
          container: document.createElement("div"),
        }),
      ]);

      // Start search
      search.start();

      // Hide results when clicking outside
      document.addEventListener("click", (event) => {
        if (
          !searchResults?.contains(event.target as Node) &&
          event.target !== input
        ) {
          hideResults();
        }
      });

      // Show results when input is focused and has content
      input?.addEventListener("focus", () => {
        if (input.value.length > 0 && ul && ul.children.length > 0) {
          showResults();
        }
      });

      function showResults() {
        searchResults?.classList.remove("hidden");
      }

      function hideResults() {
        searchResults?.classList.add("hidden");
      }

      function renderAutocomplete(
        renderOptions: AutocompleteRenderState,
        isFirstRender: Boolean,
      ) {
        const { indices, refine } = renderOptions;
        const [blog] = indices;

        if (isFirstRender && input) {
          input.addEventListener("input", ({ currentTarget }) => {
            if (currentTarget instanceof HTMLInputElement) {
              const query = currentTarget.value.trim();
              if (query.length > 0) {
                refine(query);
              } else {
                hideResults();
              }
            }
          });
        }

        if (blog && input && input.value.length > 0) {
          const fragment = document.createDocumentFragment();

          if (blog.hits.length === 0) {
            noResults?.classList.remove("hidden");
            ul?.classList.add("hidden");
          } else {
            noResults?.classList.add("hidden");
            ul?.classList.remove("hidden");

            blog.hits.forEach((item) => {
              const li = document.createElement("li");
              const a = document.createElement("a");

              a.setAttribute("href", new URL(item.path, location.origin).href);
              a.textContent = item.title;
              li.classList.add("search-result-item");
              li.appendChild(a);
              fragment.appendChild(li);
            });

            ul?.replaceChildren();
            ul?.appendChild(fragment);
          }

          showResults();
        }
      }

      // Mark as initialized
      window.searchInitialized = true;
    } catch (error) {
      console.error("Search initialization failed:", error);
    }
  }

  // Initialize on DOM ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeSearch);
  } else {
    initializeSearch();
  }

  // Re-initialize on page transitions (ViewTransitions)
  document.addEventListener("astro:page-load", () => {
    window.searchInitialized = false;
    initializeSearch();
  });
</script>

<style is:global>
  /* 動的に生成されたタグはscopedにできないため、globalで定義する必要がある */
  .search-result-item {
    @apply px-4 py-3 text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700;
  }

  .search-result-item > a {
    @apply block;
  }
</style>
