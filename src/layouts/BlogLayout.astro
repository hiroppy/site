---
import { writeFile, mkdir } from "node:fs/promises";
import { fileURLToPath } from "node:url";
import { join } from "node:path";
import { formatDate } from "../utils/formatDate";
import Layout from "./Layout.astro";
import MainLayout from "./MainLayout.astro";
import Paper from "../components/Paper.astro";
import ShareButtons from "../components/ShareButtons.astro";
import { getBlogs, parseTags } from "../utils/blog";
import Link from "../components/Link.astro";
import { HATENA_BLOG_ENTRY_URL } from "../constants";
import SnsIcon from "../components/SnsIcon.astro";
import GitHub from "../components/icons/GitHub.astro";
import BlogDescription from "../components/BlogDescription.astro";
import Pagination from "../components/Pagination.astro";
import SearchArticles from "../components/SearchArticles.astro";
import type { CollectionEntry } from "astro:content";
import type { MarkdownLayoutProps } from "astro";
import { mergeClass } from "../utils/mergeClass";
import { generateOgImage } from "../utils/ogp";

const { frontmatter, headings } = Astro.props as MarkdownLayoutProps<
  CollectionEntry<"blog">["data"]
>;
const date = formatDate(new Date(frontmatter.date));
const indices = headings.filter((heading) => heading.depth < 4);
const diffDate =
  (new Date().getTime() - new Date(frontmatter.date).getTime()) /
  (60 * 60 * 1000 * 24);
const { title, url: tmpUrl, description, tags } = frontmatter;

// TODO: url„Åå„Éï„Ç°„Ç§„É´„Éë„Çπ„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Éê„Ç∞„Åå„ÅÇ„Çã
const url = tmpUrl?.replace(".mdx", "").replace(/.+?\/content/, "");

// HMR„ÅßÈáç„Åè„Å™„Çã„Åü„ÇÅ„ÄÅdevÁí∞Â¢É„Åß„ÅØglob„Çí„Åï„Åõ„Å™„ÅÑ
const posts = import.meta.env.PROD ? await getBlogs() : [];
const index = posts.findIndex(
  ({ slug }) =>
    slug ===
    Astro.url.pathname
      .replace(/\/blog\//, "")
      .replace(/\/$/, "" /* for prod */),
);

const githubUrl = `https://github.com/hiroppy/site/tree/main/src/content/${Astro.url.pathname.replace(
  /(^\/|\/$)/g,
  "",
)}.mdx`;

// og:image
const ogImageFileName = `og-${Buffer.from(`${title}${tags}`).toString(
  "hex",
)}.png`;
const ogImageDistRelativePath = `../../ogp/${url}`;
const ogImageDistAbsolutePath = join(ogImageDistRelativePath, ogImageFileName);

if (import.meta.env.PROD) {
  const buf = await generateOgImage(title, tags.split(","));
  const fileDir = join(fileURLToPath(import.meta.url), ogImageDistRelativePath);

  await mkdir(fileDir, {
    recursive: true,
  });
  await writeFile(join(fileDir, ogImageFileName), buf);
}
---

<Layout title={title} description={description} image={ogImageDistAbsolutePath}>
  <SearchArticles slot="header-action" />
  <MainLayout title={title}>
    <BlogDescription slot="description" />
    <Paper className="overflow-y-auto" slot="optional-content">
      <div class="p-4 blog-index">
        <p>üîñ Index</p>
        <ol class="mt-2">
          {
            indices.map(({ slug, text, depth }) => (
              <li
                class={mergeClass(
                  "border-l-2 py-1",
                  depth === 2 ? "border-sky-600 section" : "border-gray-300",
                )}
              >
                <a
                  href={`#${slug}`}
                  class={mergeClass(
                    "text-sm hover:text-blue-300 ml-2 block",
                    depth === 2
                      ? "font-semibold text-gray-300"
                      : "text-gray-400",
                  )}
                >
                  {text}
                </a>
              </li>
            ))
          }
        </ol>
      </div>
    </Paper>
    <div class="flex gap-4 mb-10 justify-end items-center text-sm">
      <p>{date}</p>
      <SnsIcon
        name="GitHub"
        href={githubUrl}
        text="Edit"
        className="w-4 h-4 text-blue-300"
        textClassName="text-blue-300"
      >
        <GitHub />
      </SnsIcon>
    </div>
    <div class="flex gap-4 flex-col">
      {
        parseTags(tags).includes("javascript") && diffDate > 365 && (
          <div class="bg-yellow-500 p-3 rounded-md">
            <span class="text-gray-800 text-sm">
              üö® This article hasn't been updated in over a year
            </span>
          </div>
        )
      }
      {
        frontmatter.hatenaPath && (
          <div class="bg-gray-700 p-3 rounded-md text-sm">
            üíÅ‚Äç‚ôÄÔ∏è This post was copied from{" "}
            <Link href={`${HATENA_BLOG_ENTRY_URL}/${frontmatter.hatenaPath}`}>
              Hatena Blog
            </Link>
          </div>
        )
      }
    </div>
    <div class="blog text-gray-300">
      <slot />
    </div>
    <hr class="border-gray-600 mt-12" />
    <div>
      <ShareButtons url={`${Astro.site?.origin}${url!}`} title={title} />
      {
        index !== -1 && (
          <Pagination
            prev={index !== 0 ? posts[index - 1].slug : undefined}
            prevText={index !== 0 ? posts[index - 1].data.title : undefined}
            next={
              index !== posts.length - 1 ? posts[index + 1].slug : undefined
            }
            nextText={
              index !== posts.length - 1
                ? posts[index + 1].data.title
                : undefined
            }
            className="mt-10 flex-col md:flex-row gap-2 text-center"
          />
        )
      }
    </div>
  </MainLayout>
  <script is:inline>
    document.addEventListener(
      "astro:page-load",
      () => {
        const activeId = "blog-index-active";
        const h2 = document.querySelectorAll(".blog h2");
        const sections = document.querySelectorAll(".section");
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            const el = entry.target;

            if (el instanceof HTMLElement) {
              const index = Number(el.dataset.index);

              if (entry.isIntersecting) {
                sections.forEach((section, i) => {
                  if (i === index) {
                    section.setAttribute("id", activeId);
                  } else {
                    section.removeAttribute("id");
                  }
                });

                return;
              }
            }
          });
        });

        h2.forEach((el, i) => {
          if (el instanceof HTMLElement) {
            el.dataset.index = `${i}`;
            observer.observe(el);
          }
        });
      },
      { once: true },
    );
  </script>
</Layout>

<style is:global>
  #blog-index-active {
    @apply border-orange-500;
  }

  #blog-index-active > a {
    @apply text-blue-300;
  }

  .blog {
    font-size: 15px;
    @apply sm:text-base;
  }
  .blog h1,
  .blog h2,
  .blog h3,
  .blog h4 {
    @apply font-semibold text-gray-50 mt-10 mb-1;
  }
  .blog h1 {
    @apply text-2xl;
  }
  .blog h2 {
    @apply text-xl;
  }
  .blog h3 {
    @apply text-lg;
  }
  .blog h4 {
    @apply text-base;
  }
  .blog code:not(pre > *) {
    @apply text-gray-200  bg-gray-600 mx-1 px-1 rounded-sm shadow-lg ring-white/5;
  }
  .blog ul {
    @apply list-hyphen pl-4 my-2;
  }

  .blog li {
    @apply my-1;
  }

  .blog p {
    @apply my-4;
  }
  .blog pre {
    @apply p-4 text-sm rounded-lg my-4;
  }
  .blog a {
    @apply text-blue-300;
  }
  .blog hr {
    @apply my-4 border-gray-500;
  }
  .blog img {
    @apply mx-auto;
  }
  .blog strong {
    @apply font-semibold text-orange-300;
  }
  .blog blockquote {
    @apply px-4 border border-gray-600 border-l-blue-300 border-l-2;
  }
  .blog table {
    @apply block sm:table border-collapse table-auto w-full text-sm whitespace-nowrap overflow-x-auto my-4;
  }
  .blog th {
    @apply border-b border-gray-600  p-4 pl-8 pt-0 text-gray-200 text-left;
  }
  .blog tbody {
    @apply bg-gray-800;
  }
  .blog td {
    @apply border-b border-slate-700 p-4 pl-8 text-gray-400;
  }

  .blog iframe {
    max-width: 100%;
    margin: auto;
  }
</style>
