---
import { ViewTransitions } from "astro:transitions";
import Footer from "../components/Footer.astro";
import GA from "../components/GA.astro";
import Header from "../components/Header.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../constants";
import meImage from "../assets/images/meta/me.png";
import { importAssets, getImageSrc } from "../utils/importAssets";
import "../styles/globals.css";

type Props = {
  title?: string;
  description?: string;
  image?: string;
  isOptimizedImage?: boolean;
};

const { title, description, image, isOptimizedImage = true } = Astro.props;
const pageTitle = title ?? Astro.url.pathname.replace(/^\/|\/$/g, "");
const siteDescription = description ?? SITE_DESCRIPTION;
const ogImage = new URL(
  image
    ? isOptimizedImage
      ? getImageSrc(await importAssets(image))
      : image
    : meImage.src,
  Astro.site?.origin as string,
);

const url = new URL(Astro.url.pathname, Astro.site);
const titleContent =
  pageTitle === "" ? SITE_TITLE : `${pageTitle} - ${SITE_TITLE}`;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={siteDescription} />
    <meta property="theme-color" content="#3498db" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={SITE_TITLE} />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={titleContent} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:image" content={ogImage} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content="@about_hiroppy" />
    <meta
      name="google-site-verification"
      content="5oxyYILHYb_TUbxn5n1vZlDDEj2K8BTQhwMqJnEX8CA"
    />
    <title>{titleContent}</title>
    <link rel="icon" href="/favicon.ico" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={url} />
    <link rel="dns-prefetch" href="//www.googletagmanager.com" />
    <link rel="preconnect" href="//www.googletagmanager.com" />
    <link rel="dns-prefetch" href="//api.github.com" />
    <link rel="preconnect" href="//api.github.com" />
    <link rel="dns-prefetch" href="//b.hatena.ne.jp" />
    <link rel="preconnect" href="//b.hatena.ne.jp" />
    <link rel="author" href="http://www.hatena.ne.jp/about_hiroppy/" />
    <ViewTransitions />
    <script is:inline>
      // Theme initialization - runs before body loads to prevent FOUC
      (function () {
        const theme = localStorage.getItem("theme") || "dark";
        document.documentElement.classList.toggle("dark", theme === "dark");
      })();
    </script>
  </head>
  <body
    class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 font-body dark:from-slate-900 dark:to-slate-800"
  >
    <Header />
    <div class="container mx-auto min-h-screen px-4 py-8">
      <slot />
    </div>
    <Footer />
    {import.meta.env.PROD && <GA />}
    <script is:inline>
      // Handle theme persistence during view transitions
      document.addEventListener("astro:before-preparation", () => {
        const theme = localStorage.getItem("theme") || "dark";
        document.documentElement.classList.toggle("dark", theme === "dark");
      });

      document.addEventListener("astro:after-swap", () => {
        const theme = localStorage.getItem("theme") || "dark";
        document.documentElement.classList.toggle("dark", theme === "dark");
      });
    </script>
  </body>
</html>
