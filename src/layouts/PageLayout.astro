---
import { mkdir, writeFile } from "node:fs/promises";
import { join } from "node:path";
import Layout from "./Layout.astro";
import { generatePageOgImage } from "../utils/ogp";

interface Props {
  title: string;
  description?: string;
  pageType: string;
}

const { title, description, pageType } = Astro.props;

// Generate OG image path
const ogImageFileName = "og.png";
const url = Astro.url.pathname.replace(/\/$/, "") || "/";
const ogImagePath = url === "/" ? "/og.png" : `${url}/og.png`;

// Generate OG image in production or test mode
if (import.meta.env.PROD || process.env.NODE_ENV === "test") {
  const buf = await generatePageOgImage(title, pageType, description);
  // Create absolute path to client directory
  const distClientDir = join(process.cwd(), "dist/client");
  const fileDir = join(distClientDir, url === "/" ? "" : url);

  await mkdir(fileDir, {
    recursive: true,
  });
  await writeFile(join(fileDir, ogImageFileName), new Uint8Array(buf));
}
---

<Layout
  title={title}
  description={description}
  image={ogImagePath}
  isOptimizedImage={false}
>
  <slot />
</Layout>
