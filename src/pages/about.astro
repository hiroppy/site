---
import PageLayout from "../layouts/PageLayout.astro";
import HeroSection from "../components/HeroSection.astro";
import SocialLinksGrid from "../components/SocialLinksGrid.astro";
import QuickLinksGrid from "../components/QuickLinksGrid.astro";
import Card from "../components/Card.astro";
import CardContent from "../components/CardContent.astro";
import Section from "../components/Section.astro";
import PeriodBadge from "../components/PeriodBadge.astro";
import Image from "../components/Image.astro";
import Icon from "../components/Icon.astro";
import meImage from "../assets/images/meta/me.png";
import meta from "../../node_modules/hiroppy/generated/meta.json";
import { getRepositoryInfo } from "../utils/github";

const { profile, sns, site, community } = meta;

// Convert community object to array for easier iteration
const communityActivities = Object.entries(community).map(([key, value]) => ({
  id: key,
  title: (value as any).position,
  start: value.start,
  end: value.end,
  links: value.links,
}));

// Featured repositories to showcase
const featuredRepos = [
  { owner: "nodejs", repo: "node" },
  { owner: "webpack", repo: "webpack" },
  { owner: "webpack", repo: "webpack-dev-server" },
  { owner: "stylelint", repo: "stylelint" },
  { owner: "hiroppy", repo: "fusuma" },
  { owner: "hiroppy", repo: "web-app-template" },
];

// Get repository information
const repositories = await Promise.allSettled(
  featuredRepos.map(async ({ owner, repo }) => {
    try {
      return await getRepositoryInfo(owner, repo);
    } catch (error) {
      console.error(`Failed to fetch info for ${owner}/${repo}:`, error);
      return null;
    }
  }),
);

const repoData = repositories
  .map((result) => (result.status === "fulfilled" ? result.value : null))
  .filter((repo) => repo !== null);

// Social links configuration
const socialLinks = [
  {
    href: sns.github,
    icon: "mdi:github",
    title: "GitHub",
    description: "Visit Profile",
    color: "text-gray-800 dark:text-gray-200",
  },
  {
    href: sns.twitter,
    icon: "mdi:twitter",
    title: "Twitter/X",
    description: "Follow me",
    color: "text-blue-400",
  },
  {
    href: sns.linkedin,
    icon: "mdi:linkedin",
    title: "LinkedIn",
    description: "Connect",
    color: "text-blue-700",
  },
  {
    href: sns.connpass,
    icon: "mdi:account-group",
    title: "Connpass",
    description: "Events",
    color: "text-orange-500",
  },
  {
    href: sns.facebook,
    icon: "mdi:facebook",
    title: "Facebook",
    description: "Profile",
    color: "text-blue-600",
  },
];

// Quick links configuration
const quickLinks = [
  {
    href: site.company,
    icon: "mdi:office-building",
    title: "Company",
    description: "Coder Penguin",
    gradient:
      "bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20",
    iconColor: "text-orange-600",
  },
  {
    href: site.podcast,
    icon: "mdi:microphone",
    title: "Podcast",
    description: "Listen to Mozaic.fm",
    gradient:
      "bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20",
    iconColor: "text-purple-600",
  },
  {
    href: site.blog,
    icon: "mdi:post",
    title: "Blog",
    description: "Read Articles",
    gradient:
      "bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20",
    iconColor: "text-green-800",
  },
  {
    href: site.resume,
    icon: "mdi:account-circle",
    title: "Resume",
    description: "View Resume",
    gradient:
      "bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20",
    iconColor: "text-blue-600",
  },
];
---

<PageLayout
  title="About - Who am I ?"
  description="JavaScript Engineer, Speaker, OSS Contributor, Community Organizer"
  pageType="About"
>
  <main class="container mx-auto space-y-12 px-4 py-8">
    <!-- Hero Section -->
    <HeroSection title="Who am I ?" avatar={meImage} profileText={profile} />

    <!-- Social Links Section -->
    <Section title="Find me on">
      <SocialLinksGrid links={socialLinks} />
    </Section>

    <!-- Quick Links Section -->
    <Section title="Quick Links">
      <QuickLinksGrid links={quickLinks} />
    </Section>

    <!-- GitHub Contributions Section -->
    <Section title="OSS Maintenance">
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {
          repoData.map((repo) => (
            <Card
              variant="interactive"
              class="card-lift"
              link={{ href: repo.url }}
            >
              <CardContent class="flex h-full flex-col p-4">
                <div class="mb-3 flex items-center gap-3">
                  <div class="flex-shrink-0">
                    <Image
                      src={repo.avatar}
                      class="h-10 w-10 rounded-full"
                      alt={`${repo.name} avatar`}
                      width={40}
                      height={40}
                    />
                  </div>
                  <div class="min-w-0 flex-1">
                    <h3 class="truncate text-lg font-semibold text-gray-900 transition-colors group-hover:text-blue-600 dark:text-white dark:group-hover:text-blue-400">
                      {repo.name}
                    </h3>
                    {repo.language && (
                      <div class="flex items-center gap-1 text-sm text-gray-500 dark:text-gray-400">
                        <span class="h-3 w-3 rounded-full bg-yellow-400" />
                        {repo.language}
                      </div>
                    )}
                  </div>
                </div>

                {repo.description && (
                  <p class="mb-3 line-clamp-2 text-sm text-gray-600 dark:text-gray-300">
                    {repo.description}
                  </p>
                )}

                <div class="mt-auto flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                  <div class="flex items-center gap-1">
                    <Icon icon="mdi:star" class="text-yellow-500" />
                    <span>
                      {new Intl.NumberFormat("ja-JP").format(repo.stars)}
                    </span>
                  </div>
                  <div class="flex items-center gap-1">
                    <Icon icon="mdi:source-fork" class="text-blue-500" />
                    <span>
                      {new Intl.NumberFormat("ja-JP").format(repo.forks)}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        }
      </div>
    </Section>

    <!-- Community Activities Section -->
    <Section title="Community Activities">
      <div class="space-y-8">
        {
          communityActivities.map(({ title, start, end, links }) => (
            <div>
              <div class="mb-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
                  {title}
                </h2>
                <PeriodBadge start={start} end={end} />
              </div>
              {links && links.length > 0 && (
                <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {links
                    .sort((a, b) => {
                      // Try to extract year from URL or title for chronological sorting
                      const extractYear = (item: {
                        url: string;
                        title: string;
                      }) => {
                        const yearMatch = (item.url + " " + item.title).match(
                          /20(\d{2})/,
                        );
                        return yearMatch ? parseInt("20" + yearMatch[1]) : 0;
                      };

                      const yearA = extractYear(a);
                      const yearB = extractYear(b);

                      if (yearA && yearB && yearA !== yearB) {
                        return yearB - yearA; // Newest first
                      }

                      // Fallback: reverse alphabetical by title (newer-sounding titles first)
                      return b.title.localeCompare(a.title);
                    })
                    .map(({ title: linkTitle, description, image, url }) => (
                      <Card
                        variant="interactive"
                        class="card-lift"
                        link={{ href: url }}
                      >
                        <CardContent class="p-4">
                          {image && image.trim() ? (
                            <div class="mb-3 overflow-hidden rounded-lg">
                              <Image
                                src={image}
                                class="card-image-zoom h-32 w-full object-cover"
                                alt={linkTitle}
                                width={300}
                                height={128}
                              />
                            </div>
                          ) : (
                            <div class="mb-3 flex h-32 items-center justify-center rounded-lg bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20">
                              <Icon
                                icon="mdi:presentation"
                                class="text-4xl text-blue-600 dark:text-blue-400"
                              />
                            </div>
                          )}
                          <h3 class="mb-2 text-lg leading-relaxed font-semibold text-gray-900 transition-colors group-hover:text-blue-600 dark:text-white dark:group-hover:text-blue-400">
                            {linkTitle}
                          </h3>
                          {description && (
                            <p class="line-clamp-3 text-sm text-gray-600 dark:text-gray-300">
                              {description}
                            </p>
                          )}
                        </CardContent>
                      </Card>
                    ))}
                </div>
              )}
            </div>
          ))
        }
      </div>
    </Section>
  </main>
</PageLayout>
