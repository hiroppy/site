---
export const prerender = false;

import Layout from "../../../layouts/Layout.astro";
import TwoPaneLayout from "../../../components/TwoPaneLayout.astro";
import ArticleSidebar from "../../../components/feedle/ArticleSidebar.astro";
import ArticleModal from "../../../components/feedle/ArticleModal.astro";
import ServiceInfoHeader from "../../../components/feedle/ServiceInfoHeader.astro";
import RSSFeedButtons from "../../../components/feedle/RSSFeedButtons.astro";
import ContentArea from "../../../components/feedle/ContentArea.astro";
import { getFeedleData } from "../../../utils/feedleData";
import { generatePageTitle, BASE_PATH } from "../../../utils/feedleConfig";

// URLパスを解析
const { path } = Astro.params;
const pathSegments = path ? path.split("/").filter(Boolean) : [];

// URLクエリパラメータから期間フィルターを取得
const currentPeriod = Astro.url.searchParams.get("period") || "all";

// データの取得
let data;
try {
  data = await getFeedleData(pathSegments, currentPeriod);
} catch (error) {
  // 無効なパスの場合はfrontendにリダイレクト
  return Astro.redirect(`${BASE_PATH}/frontend`, 302);
}

const {
  currentType,
  currentCategory,
  currentService,
  articles,
  sources,
  serviceGroups,
  lastHarvested,
  error,
} = data;

// ページタイトルの生成
const pageTitle = generatePageTitle(
  currentType,
  currentCategory,
  currentService,
);

// OG用の説明文を生成
const generateDescription = () => {
  let desc = "Tech article aggregation platform";
  if (currentType !== "frontend") {
    desc += ` - ${currentType.charAt(0).toUpperCase() + currentType.slice(1)} articles`;
  }
  if (currentCategory && currentCategory !== "all") {
    desc += ` from ${currentCategory}`;
  }
  if (currentService) {
    desc += ` - ${currentService}`;
  }
  return desc;
};

const pageDescription = generateDescription();

// OG画像のパス設定（静的ファイルを参照）
const ogImagePath = `${BASE_PATH}/${path || "frontend"}/og.png`;
---

<!-- 動的ページなのでLayoutを使用し、動的OG画像を設定 -->
<Layout
  title={pageTitle}
  description={pageDescription}
  image={ogImagePath}
  isOptimizedImage={false}
  fullscreen
>
  <TwoPaneLayout>
    <div slot="sidebar" class="h-full">
      <ArticleSidebar
        currentType={currentType}
        currentCategory={currentCategory}
        currentService={currentService}
        currentPeriod={currentPeriod}
        serviceGroups={serviceGroups}
        lastHarvested={lastHarvested}
      />
    </div>

    <div slot="content" class="flex h-full flex-col">
      {
        currentService && (
          <ServiceInfoHeader
            currentService={currentService}
            serviceGroups={serviceGroups}
            currentType={currentType}
            currentCategory={currentCategory}
            currentPeriod={currentPeriod}
          />
        )
      }

      {
        !currentService && (
          <RSSFeedButtons
            currentType={currentType}
            lastHarvested={lastHarvested}
          />
        )
      }

      <ContentArea error={error} articles={articles} sources={sources} />
    </div>
  </TwoPaneLayout>

  <ArticleModal />
</Layout>
