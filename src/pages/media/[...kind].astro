---
import Layout from "../../layouts/Layout.astro";
import MediaLayout from "../../layouts/MediaLayout.astro";
import { HATENA_BLOG_URL, type MediaType } from "../../constants";
import { sortItems } from "../../utils/sortItems";
import Image from "../../components/Image.astro";

type Kind = MediaType | undefined;

export function getStaticPaths(): Array<{ params: { kind: Kind } }> {
  return [
    { params: { kind: undefined } },
    { params: { kind: "talks" } },
    { params: { kind: "articles" } },
    { params: { kind: "podcasts" } },
    { params: { kind: "achievements" } },
  ];
}

const { kind } = Astro.params;
const items: DataItem[] = await (async () => {
  switch (kind) {
    case undefined:
      return sortItems([
        ...(await getData("talks")),
        ...(await getData("articles")),
        ...(await getData("podcasts")),
        ...(await getData("achievements")),
      ]);
    case "talks":
      return await getData("talks");
    case "articles":
      return await getData("articles");
    case "podcasts":
      return await getData("podcasts");
    case "achievements":
      return await getData("achievements");
    default:
      throw new Error(`Unknown kind: ${kind}`);
  }
})();

async function getData(kind: Exclude<Kind, undefined>) {
  const res = (await import(`../../../generated/${kind}.json`)).default.map(
    (item: Record<string, string>) => ({
      ...item,
      icon: getMediaIcon(kind),
      prefixForTitle: getPrefixForTitle(kind),
    }),
  );

  if (kind === "articles") {
    return res.filter(({ siteUrl }: any) => {
      return !(
        siteUrl?.startsWith(import.meta.env.SITE) ||
        siteUrl?.startsWith(HATENA_BLOG_URL)
      );
    });
  }

  return res;
}

function getMediaIcon(type: MediaType) {
  switch (type) {
    case "articles":
      return "✏️";
    case "podcasts":
      return "🎧";
    case "achievements":
      return "🎉";
    case "talks":
      return "👨‍🏫";
    default:
      return "😵‍💫";
  }
}

function getPrefixForTitle(type: MediaType) {
  switch (type) {
    case "articles":
      return "Posted";
    case "podcasts":
    case "talks":
      return "Talked";
    case "achievements":
      return "Achieved";
    default:
      return "😵‍💫";
  }
}
---

<Layout>
  <MediaLayout>
    <div
      class="grid auto-rows-max grid-cols-2 gap-4 md:grid-cols-3 xl:grid-cols-4"
    >
      {
        items.map(({ title, description, image, icon, url, publishedAt }) => (
          <a
            href={url}
            target={url.startsWith(import.meta.env.SITE) ? undefined : "_blank"}
            aria-label={title}
          >
            <div class="group relative h-52 border border-gray-600 hover:border-2 hover:border-blue-300">
              <div class="gruop-hover:border-2 absolute -left-3 -top-3 z-30 flex h-10 w-10 items-center justify-center rounded-full border-2 border-gray-600 bg-gray-600 group-hover:border-blue-300">
                <span class="text-xl">{icon}</span>
              </div>
              <div class="absolute top-0 flex h-full w-full items-center justify-center overflow-hidden bg-gray-700">
                <div class="absolute z-20 hidden h-full w-full bg-gray-900/90 group-hover:block">
                  <div class="flex h-full justify-center overflow-scroll px-2 py-10 text-sm">
                    <p class="break-all">{description}</p>
                  </div>
                </div>
                <Image src={image ?? ""} alt={title} width={100} height={100} />
              </div>
              <div class="absolute bottom-0 z-10 w-full text-sm">
                <div class="text-right">
                  <span class="bg-gray-900/90 p-1">{publishedAt}</span>
                </div>
                <div class="flex h-16 items-center overflow-hidden bg-gray-900/90 px-2 py-1">
                  <h2
                    class="overflow-hidden"
                    style="display: -webkit-box; -webkit-box-orient: vertical;  -webkit-line-clamp: 2;"
                  >
                    {title}
                  </h2>
                </div>
              </div>
            </div>
          </a>
        ))
      }
    </div>
  </MediaLayout>
</Layout>
