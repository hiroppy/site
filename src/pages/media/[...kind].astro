---
import MediaLayout from "../../layouts/MediaLayout.astro";
import { HATENA_BLOG_URL, type MediaType } from "../../constants";
import { sortItems } from "../../utils/sortItems";
import MediaCard from "../../components/MediaCard.astro";
import Icon from "../../components/Icon.astro";

type Kind = MediaType | undefined;

export function getStaticPaths(): Array<{ params: { kind: Kind } }> {
  return [
    { params: { kind: undefined } },
    { params: { kind: "talks" } },
    // TODO: fix
    { params: { kind: "articles" as "media" } },
    { params: { kind: "podcasts" } },
  ];
}

const { kind } = Astro.params;
const items: DataItem[] = await (async () => {
  switch (kind) {
    case undefined:
      return sortItems([
        ...(await getData("talks")),
        ...(await getData("media")),
        ...(await getData("podcasts")),
      ]);
    case "talks":
      return await getData("talks");
    // TODO: fix
    case "articles" as "media":
      return await getData("media");
    case "podcasts":
      return await getData("podcasts");
    default:
      throw new Error(`Unknown kind: ${kind}`);
  }
})();

async function getData(kind: Exclude<Kind, undefined>) {
  const res = (
    await import(`../../../node_modules/hiroppy/generated/${kind}.json`)
  ).default.map((item: Record<string, string>) => ({
    ...item,
    icon: getMediaIcon(kind),
    prefixForTitle: getPrefixForTitle(kind),
  }));

  if (kind === "media") {
    return res.filter(({ siteUrl }: any) => {
      return !(
        siteUrl?.startsWith(import.meta.env.SITE) ||
        siteUrl?.startsWith(HATENA_BLOG_URL)
      );
    });
  }

  return res;
}

function getMediaIcon(type: MediaType) {
  switch (type) {
    case "media":
      return "mdi:typewriter";
    case "podcasts":
      return "mdi:podcast";
    case "talks":
      return "mdi:presentation";
    default:
      return "mdi:help-circle";
  }
}

function getPrefixForTitle(type: MediaType) {
  switch (type) {
    case "media":
      return "Posted";
    case "podcasts":
    case "talks":
      return "Talked";
    default:
      return "Unknown";
  }
}
---

<MediaLayout>
  <!-- Modern Grid Layout -->
  <div
    class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
  >
    {
      items.map(
        ({ title, description, image, icon, url, publishedAt, links }) => (
          <MediaCard
            title={title}
            description={description}
            image={image}
            icon={icon}
            url={url}
            publishedAt={publishedAt}
            links={links}
          />
        ),
      )
    }
  </div>

  {
    items.length === 0 && (
      <div class="py-16 text-center">
        <div class="mb-4 flex justify-center opacity-20">
          <Icon icon="noto:memo" width="96" height="96" />
        </div>
        <h2 class="mb-2 text-xl font-semibold text-gray-900 dark:text-gray-100">
          No items found
        </h2>
        <p class="text-gray-600 dark:text-gray-400">
          該当するメディアが見つかりませんでした
        </p>
      </div>
    )
  }
</MediaLayout>
