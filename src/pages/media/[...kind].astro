---
import MediaLayout from "../../layouts/MediaLayout.astro";
import { HATENA_BLOG_URL, type MediaType } from "../../constants";
import { sortItems } from "../../utils/sortItems";
import Image from "../../components/Image.astro";
import Card from "../../components/Card.astro";

type Kind = MediaType | undefined;

export function getStaticPaths(): Array<{ params: { kind: Kind } }> {
  return [
    { params: { kind: undefined } },
    { params: { kind: "talks" } },
    // TODO: fix
    { params: { kind: "articles" as "media" } },
    { params: { kind: "podcasts" } },
  ];
}

const { kind } = Astro.params;
const items: DataItem[] = await (async () => {
  switch (kind) {
    case undefined:
      return sortItems([
        ...(await getData("talks")),
        ...(await getData("media")),
        ...(await getData("podcasts")),
      ]);
    case "talks":
      return await getData("talks");
    // TODO: fix
    case "articles" as "media":
      return await getData("media");
    case "podcasts":
      return await getData("podcasts");
    default:
      throw new Error(`Unknown kind: ${kind}`);
  }
})();

async function getData(kind: Exclude<Kind, undefined>) {
  const res = (
    await import(`../../../node_modules/hiroppy/generated/${kind}.json`)
  ).default.map((item: Record<string, string>) => ({
    ...item,
    icon: getMediaIcon(kind),
    prefixForTitle: getPrefixForTitle(kind),
  }));

  if (kind === "media") {
    return res.filter(({ siteUrl }: any) => {
      return !(
        siteUrl?.startsWith(import.meta.env.SITE) ||
        siteUrl?.startsWith(HATENA_BLOG_URL)
      );
    });
  }

  return res;
}

function getMediaIcon(type: MediaType) {
  switch (type) {
    case "media":
      return "📣";
    case "podcasts":
      return "🎧";
    case "talks":
      return "👨‍🏫";
    default:
      return "😵‍💫";
  }
}

function getPrefixForTitle(type: MediaType) {
  switch (type) {
    case "media":
      return "Posted";
    case "podcasts":
    case "talks":
      return "Talked";
    default:
      return "😵‍💫";
  }
}
---

<MediaLayout>
  <!-- Modern Grid Layout -->
  <div
    class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
  >
    {
      items.map(({ title, description, image, icon, url, publishedAt }) => (
        <Card
          link={{ href: url, ariaLabel: `${title} - ${description}` }}
          class="group flex h-full flex-col overflow-hidden shadow-md transition-all duration-300 hover:shadow-lg"
        >
          <div class="relative flex h-48 items-center justify-center overflow-hidden bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-600">
            <div class="absolute top-3 left-3 z-10">
              <div class="flex h-8 w-8 items-center justify-center rounded-full border border-gray-200 bg-white/90 text-lg backdrop-blur-sm dark:border-gray-600 dark:bg-gray-900/90">
                {icon}
              </div>
            </div>
            {image && (
              <Image
                src={image}
                alt={title}
                width={200}
                height={120}
                class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
            )}
            {!image && (
              <div class="text-6xl opacity-20 dark:opacity-10">{icon}</div>
            )}
            <div class="media-overlay absolute inset-0 flex items-center justify-center bg-black/80 p-4">
              <p class="line-clamp-4 text-center text-sm leading-relaxed text-white">
                {description}
              </p>
            </div>
          </div>

          <div class="flex flex-grow flex-col justify-between p-4">
            <div class="mb-2 flex items-center justify-between">
              <span class="rounded-md bg-gray-100 px-2 py-1 text-xs text-gray-500 dark:bg-gray-700 dark:text-gray-400">
                {publishedAt}
              </span>
            </div>
            <h2 class="line-clamp-2 text-sm leading-tight font-semibold text-gray-900 transition-colors group-hover:text-blue-600 dark:text-gray-100 dark:group-hover:text-blue-400">
              {title}
            </h2>
          </div>
        </Card>
      ))
    }
  </div>

  {
    items.length === 0 && (
      <div class="py-16 text-center">
        <div class="mb-4 text-6xl opacity-20">📝</div>
        <h2 class="mb-2 text-xl font-semibold text-gray-900 dark:text-gray-100">
          No items found
        </h2>
        <p class="text-gray-600 dark:text-gray-400">
          該当するメディアが見つかりませんでした
        </p>
      </div>
    )
  }
</MediaLayout>
