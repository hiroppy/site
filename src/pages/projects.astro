---
import MainLayout from "../layouts/MainLayout.astro";
import Section from "../components/Section.astro";
import ProjectCard from "../components/ProjectCard.astro";
import Card from "../components/Card.astro";
import CardContent from "../components/CardContent.astro";
import CardTitle from "../components/CardTitle.astro";
import Badge from "../components/Badge.astro";
import Image from "../components/Image.astro";
import GitHubStats from "../components/GitHubStats.astro";
import { getRepositoryInfo } from "../utils/github";
import { getLanguageDot } from "../utils/languageColors";
import reposData from "../../node_modules/hiroppy/generated/repos.json";

// Define repositories to fetch
const repositoriesToFetch = [
  "hiroppy/fusuma",
  "hiroppy/web-app-template",
  "hiroppy/nextjs-app-router-training",
  "hiroppy/the-sample-of-module-bundler",
];

// Fetch repository information from GitHub
const projectsFromGitHub = await Promise.all(
  repositoriesToFetch.map(async (repo) => {
    const [owner, name] = repo.split("/");
    try {
      const repoInfo = await getRepositoryInfo(owner, name);
      return {
        id: repositoriesToFetch.indexOf(repo) + 1,
        name: name,
        fullName: repoInfo.name,
        description: repoInfo.description,
        stars: repoInfo.stars,
        forks: repoInfo.forks,
        language: repoInfo.language,
        url: repoInfo.url,
        avatar: repoInfo.avatar,
        homepage: repoInfo.homepage,
        topics: repoInfo.topics,
        lastUpdated: repoInfo.updatedAt.split("T")[0],
        status: repoInfo.archived ? "Archived" : "Active",
      };
    } catch (error) {
      console.error(`Failed to fetch ${repo}:`, error);
      // Fallback to static data for this repo
      return null;
    }
  }),
).then((results) =>
  results.filter(
    (project): project is NonNullable<typeof project> => project !== null,
  ),
);

// Use GitHub data as projects
const projects = projectsFromGitHub;

// Use maintaining data from repos.json for OSS Contributions and fetch GitHub stats
const contributions = await Promise.all(
  reposData.maintaining.map(async (repo) => {
    const [owner, repoName] = repo.name.split("/");
    try {
      const repoInfo = await getRepositoryInfo(owner, repoName);
      return {
        name: repo.name,
        description: repo.description,
        role: "Maintainer",
        url: repo.url,
        image: repo.image,
        language: repo.language,
        stars: repoInfo.stars,
        forks: repoInfo.forks,
      };
    } catch (error) {
      console.error(`Failed to fetch GitHub stats for ${repo.name}:`, error);
      return {
        name: repo.name,
        description: repo.description,
        role: "Maintainer",
        url: repo.url,
        image: repo.image,
        language: repo.language,
        stars: 0,
        forks: 0,
      };
    }
  }),
);
---

<MainLayout title="Projects & Contributions">
  <!-- My Projects -->
  <Section title="My Projects" class="mb-16">
    <div class="grid gap-6 md:grid-cols-2">
      {
        projects.map((project) => (
          <ProjectCard
            name={project.name}
            description={project.description}
            stars={project.stars}
            forks={project.forks}
            language={project.language}
            url={project.url}
            homepage={project.homepage}
            topics={project.topics}
            status={project.status}
            lastUpdated={project.lastUpdated}
          />
        ))
      }
    </div>
  </Section>

  <!-- OSS Contributions -->
  <Section title="OSS Contributions" class="mb-16">
    <div class="space-y-4">
      {
        contributions.map((contrib) => (
          <Card
            variant="interactive"
            link={{ href: contrib.url, isBlank: true }}
          >
            <CardContent>
              <div class="flex items-start space-x-3">
                <div class="flex-shrink-0">
                  <Image
                    src={contrib.image}
                    alt={`${contrib.name} logo`}
                    width={60}
                    height={60}
                    class="h-16 w-16 rounded-lg"
                  />
                </div>
                <div class="min-w-0 flex-1">
                  {/* <!-- Project Name Row --> */}
                  <div class="mb-2">
                    <CardTitle level={3} class="text-lg">
                      {contrib.name}
                    </CardTitle>
                  </div>

                  {/* <!-- Role and Stats Row --> */}
                  <div class="mb-2 flex flex-wrap items-center justify-between gap-2">
                    <Badge
                      variant="secondary"
                      class="bg-gray-100 text-xs text-gray-800 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                    >
                      {contrib.role}
                    </Badge>
                    <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                      <GitHubStats type="star" count={contrib.stars} />
                      <GitHubStats type="fork" count={contrib.forks} />
                    </div>
                  </div>

                  <p class="mb-2 line-clamp-2 text-gray-600 dark:text-gray-400">
                    {contrib.description}
                  </p>
                  {contrib.language && (
                    <div class="flex items-center space-x-1 text-sm text-gray-500 dark:text-gray-400">
                      <div class={getLanguageDot(contrib.language)} />
                      <span>{contrib.language}</span>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))
      }
    </div>
  </Section>
</MainLayout>
